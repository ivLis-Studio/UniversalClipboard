{
    "hotkey": {
        "modifiers": [
            "shift_l"
        ],
        "key": "~"
    },
    "history": [
        "!! 아직 개발중입니다. !!\r\n\r\n# UniPaste - Clipboard History Manager\r\n\r\nUniPaste는 사용자의 클립보드 사용 내역을 효율적으로 관리하고, 원하는 항목을 쉽게 다시 사용할 수 있도록 도와주는 클립보드 히스토리 매니저 애플리케이션입니다. Windows 와 Mac 기기 간의 클립보드 동기화를 지원합니다.\r\n\r\n## ✨ 주요 기능\r\n\r\n*   **클립보드 히스토리 저장**: 텍스트 복사 기록을 자동으로 저장합니다.\r\n*   **히스토리 팝업**: 설정된 단축키를 통해 클립보드 히스토리 목록을 빠르게 확인할 수 있는 팝업을 제공합니다.\r\n*   **간편한 붙여넣기**: 히스토리 목록에서 원하는 항목을 선택하여 즉시 붙여넣을 수 있습니다.\r\n*   **단축키 커스터마이징**: 사용자가 선호하는 단축키로 히스토리 팝업 호출 키를 변경할 수 있습니다.\r\n*   **시스템 트레이 지원**: 애플리케이션을 시스템 트레이에서 관리할 수 있습니다.\r\n*   **설정 저장**: 사용자의 단축키 설정 등은 `clipboard_manager_config.json` 파일에 저장됩니다.\r\n\r\n## 🛠️ 사용 기술\r\n\r\n*   Python\r\n*   PyQt6 (GUI 프레임워크)\r\n*   Pystray (시스템 트레이 아이콘)\r\n*   Pynput (전역 단축키 리스닝 - hotkey_manager.py 에서 사용될 것으로 추정)\r\n\r\n## 🚀 시작하기\r\n\r\n1.  **필수 라이브러리 설치** (예상):\r\n    ```bash\r\n    pip install PyQt6 pystray pynput Pillow\r\n    ```\r\n    (정확한 의존성은 `requirements.txt` 파일이 있다면 해당 파일을 참고하거나, 소스코드 임포트 구문을 확인해야 합니다.)\r\n\r\n2.  **애플리케이션 실행**:\r\n    ```bash\r\n    python main.py\r\n    ```\r\n\r\n3.  **사용법**:\r\n    *   애플리케이션을 실행하면 시스템 트레이에 아이콘이 나타납니다.\r\n    *   기본 또는 사용자가 설정한 단축키를 누르면 클립보드 히스토리 팝업이 나타납니다.\r\n    *   팝업에서 원하는 항목을 선택하여 붙여넣을 수 있습니다.\r\n    *   트레이 아이콘 메뉴나 팝업 내 설정(구현된 경우)을 통해 단축키를 변경할 수 있습니다.\r\n\r\n## ⚙️ 설정\r\n\r\n*   단축키 및 기타 설정은 `clipboard_manager_config.json` 파일에서 관리됩니다.\r\n    *   **기본 단축키 조합**: (애플리케이션 실행 후 확인 또는 `config_manager.py`의 `DEFAULT_HOTKEY_CONFIG` 참조)\r\n\r\n## 🤝 기여하기\r\n\r\n버그를 발견했거나 새로운 기능을 제안하고 싶다면 언제든지 GitHub 이슈를 통해 알려주세요. Pull Request도 환영합니다!",
        "# UniPaste - Clipboard History Manager\r\n\r\nUniPaste는 사용자의 클립보드 사용 내역을 효율적으로 관리하고, 원하는 항목을 쉽게 다시 사용할 수 있도록 도와주는 클립보드 히스토리 매니저 애플리케이션입니다.\r\n\r\n## ✨ 주요 기능\r\n\r\n*   **클립보드 히스토리 저장**: 텍스트 복사 기록을 자동으로 저장합니다.\r\n*   **히스토리 팝업**: 설정된 단축키를 통해 클립보드 히스토리 목록을 빠르게 확인할 수 있는 팝업을 제공합니다.\r\n*   **간편한 붙여넣기**: 히스토리 목록에서 원하는 항목을 선택하여 즉시 붙여넣을 수 있습니다.\r\n*   **단축키 커스터마이징**: 사용자가 선호하는 단축키로 히스토리 팝업 호출 키를 변경할 수 있습니다.\r\n*   **시스템 트레이 지원**: 애플리케이션을 시스템 트레이에서 관리할 수 있습니다.\r\n*   **설정 저장**: 사용자의 단축키 설정 등은 `clipboard_manager_config.json` 파일에 저장됩니다.\r\n\r\n## 🛠️ 사용 기술\r\n\r\n*   Python\r\n*   PyQt6 (GUI 프레임워크)\r\n*   Pystray (시스템 트레이 아이콘)\r\n*   Pynput (전역 단축키 리스닝 - hotkey_manager.py 에서 사용될 것으로 추정)\r\n\r\n## 🚀 시작하기\r\n\r\n1.  **필수 라이브러리 설치** (예상):\r\n    ```bash\r\n    pip install PyQt6 pystray pynput Pillow\r\n    ```\r\n    (정확한 의존성은 `requirements.txt` 파일이 있다면 해당 파일을 참고하거나, 소스코드 임포트 구문을 확인해야 합니다.)\r\n\r\n2.  **애플리케이션 실행**:\r\n    ```bash\r\n    python main.py\r\n    ```\r\n\r\n3.  **사용법**:\r\n    *   애플리케이션을 실행하면 시스템 트레이에 아이콘이 나타납니다.\r\n    *   기본 또는 사용자가 설정한 단축키를 누르면 클립보드 히스토리 팝업이 나타납니다.\r\n    *   팝업에서 원하는 항목을 선택하여 붙여넣을 수 있습니다.\r\n    *   트레이 아이콘 메뉴나 팝업 내 설정(구현된 경우)을 통해 단축키를 변경할 수 있습니다.\r\n\r\n## ⚙️ 설정\r\n\r\n*   단축키 및 기타 설정은 `clipboard_manager_config.json` 파일에서 관리됩니다.\r\n    *   **기본 단축키 조합**: (애플리케이션 실행 후 확인 또는 `config_manager.py`의 `DEFAULT_HOTKEY_CONFIG` 참조)\r\n\r\n## 🤝 기여하기\r\n\r\n버그를 발견했거나 새로운 기능을 제안하고 싶다면 언제든지 GitHub 이슈를 통해 알려주세요. Pull Request도 환영합니다!",
        "애플리케이션이 백그라운드에서 실행 중이니 테스트해 보세요. 화면 하단을 꽉 채우는 디자인으로 변경되었을 것입니다.\n"
    ]
}